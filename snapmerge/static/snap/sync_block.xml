<block-definition s="sync" type="command" category="control"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doCallCC"><block s="reportJSFunction"><list><l></l></list><l>IDE_Morph.prototype.projectMenu = function () {&#xD;var menu,&#xD;        myself = this,&#xD;        world = this.world(),&#xD;        pos = this.controlBar.projectButton.bottomLeft(),&#xD;        graphicsName = this.currentSprite instanceof SpriteMorph ?&#xD;                &apos;Costumes&apos; : &apos;Backgrounds&apos;,&#xD;        shiftClicked = (world.currentKey === 16);&#xD;&#xD;    menu = new MenuMorph(this);&#xD;    menu.addItem(&apos;Project notes...&apos;, &apos;editProjectNotes&apos;);&#xD;    menu.addLine();&#xD;    menu.addPair(&apos;New&apos;, &apos;createNewProject&apos;, &apos;^N&apos;);&#xD;    menu.addPair(&apos;Open...&apos;, &apos;openProjectsBrowser&apos;, &apos;^O&apos;);&#xD;    menu.addPair(&apos;Save&apos;, "save", &apos;^S&apos;);&#xD;    menu.addItem(&apos;Save As...&apos;, &apos;saveProjectsBrowser&apos;);&#xD;    menu.addLine();&#xD;    menu.addItem(&#xD;        &apos;Import...&apos;,&#xD;        function () {&#xD;            var inp = document.createElement(&apos;input&apos;);&#xD;            if (myself.filePicker) {&#xD;                document.body.removeChild(myself.filePicker);&#xD;                myself.filePicker = null;&#xD;            }&#xD;            inp.type = &apos;file&apos;;&#xD;            inp.style.color = "transparent";&#xD;            inp.style.backgroundColor = "transparent";&#xD;            inp.style.border = "none";&#xD;            inp.style.outline = "none";&#xD;            inp.style.position = "absolute";&#xD;            inp.style.top = "0px";&#xD;            inp.style.left = "0px";&#xD;            inp.style.width = "0px";&#xD;            inp.style.height = "0px";&#xD;            inp.style.display = "none";&#xD;            inp.addEventListener(&#xD;                "change",&#xD;                function () {&#xD;                    document.body.removeChild(inp);&#xD;                    myself.filePicker = null;&#xD;                    world.hand.processDrop(inp.files);&#xD;                },&#xD;                false&#xD;            );&#xD;            document.body.appendChild(inp);&#xD;            myself.filePicker = inp;&#xD;            inp.click();&#xD;        },&#xD;        &apos;file menu import hint&apos; // looks up the actual text in the translator&#xD;    );&#xD;&#xD;    if (shiftClicked) {&#xD;        menu.addItem(&#xD;            localize(&#xD;                &apos;Export project...&apos;) + &apos; &apos; + localize(&apos;(in a new window)&apos;&#xD;            ),&#xD;            function () {&#xD;                if (myself.projectName) {&#xD;                    myself.exportProject(myself.projectName, shiftClicked);&#xD;                } else {&#xD;                    myself.prompt(&apos;Export Project As...&apos;, function (name) {&#xD;                        // false - override the shiftClick setting to use XML&#xD;                        myself.exportProject(name, false);&#xD;                    }, null, &apos;exportProject&apos;);&#xD;                }&#xD;            },&#xD;            &apos;show project data as XML\nin a new browser window&apos;,&#xD;            new Color(100, 0, 0)&#xD;        );&#xD;    }&#xD;    menu.addItem(&#xD;        shiftClicked ?&#xD;                &apos;Export project as plain text...&apos; : &apos;Export project...&apos;,&#xD;        function () {&#xD;            if (myself.projectName) {&#xD;                myself.exportProject(myself.projectName, shiftClicked);&#xD;            } else {&#xD;                myself.prompt(&apos;Export Project As...&apos;, function (name) {&#xD;                    myself.exportProject(name, shiftClicked);&#xD;                }, null, &apos;exportProject&apos;);&#xD;            }&#xD;        },&#xD;        &apos;save project data as XML\nto your downloads folder&apos;,&#xD;        shiftClicked ? new Color(100, 0, 0) : null&#xD;    );&#xD;&#xD;    if (this.stage.globalBlocks.length) {&#xD;        menu.addItem(&#xD;            &apos;Export blocks...&apos;,&#xD;            function () {myself.exportGlobalBlocks(); },&#xD;            &apos;show global custom block definitions as XML&apos; +&#xD;                &apos;\nin a new browser window&apos;&#xD;        );&#xD;        menu.addItem(&#xD;            &apos;Unused blocks...&apos;,&#xD;            function () {myself.removeUnusedBlocks(); },&#xD;            &apos;find unused global custom blocks&apos; +&#xD;                &apos;\nand remove their definitions&apos;&#xD;        );&#xD;    }&#xD;&#xD;    menu.addItem(&#xD;        &apos;Export summary...&apos;,&#xD;        function () {myself.exportProjectSummary(); },&#xD;        &apos;open a new browser browser window\n with a summary of this project&apos;&#xD;    );&#xD;&#xD;    if (shiftClicked) {&#xD;        menu.addItem(&#xD;            &apos;Export summary with drop-shadows...&apos;,&#xD;            function () {myself.exportProjectSummary(true); },&#xD;            &apos;open a new browser browser window&apos; +&#xD;                &apos;\nwith a summary of this project&apos; +&#xD;                &apos;\nwith drop-shadows on all pictures.&apos; +&#xD;                &apos;\nnot supported by all browsers&apos;,&#xD;            new Color(100, 0, 0)&#xD;        );&#xD;        menu.addItem(&#xD;            &apos;Export all scripts as pic...&apos;,&#xD;            function () {myself.exportScriptsPicture(); },&#xD;            &apos;show a picture of all scripts\nand block definitions&apos;,&#xD;            new Color(100, 0, 0)&#xD;        );&#xD;    }&#xD;&#xD;&#xD;&#xD;&#xD;&#xD;&#xD;// BEGIN Update Smerge&#xD;var updateSmergeMenu = function(ide, evt){&#xD;var newUrl = JSON.parse(evt.target.response)["url"];&#xD;ide.showMessage(&apos;exported&apos;);&#xD;IDE_Morph.prototype.projectMenu = function () {&#xD;&#xD;    var menu,&#xD;        myself = this,&#xD;        world = this.world(),&#xD;        pos = this.controlBar.projectButton.bottomLeft(),&#xD;        graphicsName = this.currentSprite instanceof SpriteMorph ?&#xD;                &apos;Costumes&apos; : &apos;Backgrounds&apos;,&#xD;        shiftClicked = (world.currentKey === 16);&#xD;&#xD;    menu = new MenuMorph(this);&#xD;    menu.addItem(&apos;Project notes...&apos;, &apos;editProjectNotes&apos;);&#xD;    menu.addLine();&#xD;    menu.addPair(&apos;New&apos;, &apos;createNewProject&apos;, &apos;^N&apos;);&#xD;    menu.addPair(&apos;Open...&apos;, &apos;openProjectsBrowser&apos;, &apos;^O&apos;);&#xD;    menu.addPair(&apos;Save&apos;, "save", &apos;^S&apos;);&#xD;    menu.addItem(&apos;Save As...&apos;, &apos;saveProjectsBrowser&apos;);&#xD;    menu.addLine();&#xD;    menu.addItem(&#xD;        &apos;Import...&apos;,&#xD;        function () {&#xD;            var inp = document.createElement(&apos;input&apos;);&#xD;            if (myself.filePicker) {&#xD;                document.body.removeChild(myself.filePicker);&#xD;                myself.filePicker = null;&#xD;            }&#xD;            inp.type = &apos;file&apos;;&#xD;            inp.style.color = "transparent";&#xD;            inp.style.backgroundColor = "transparent";&#xD;            inp.style.border = "none";&#xD;            inp.style.outline = "none";&#xD;            inp.style.position = "absolute";&#xD;            inp.style.top = "0px";&#xD;            inp.style.left = "0px";&#xD;            inp.style.width = "0px";&#xD;            inp.style.height = "0px";&#xD;            inp.style.display = "none";&#xD;            inp.addEventListener(&#xD;                "change",&#xD;                function () {&#xD;                    document.body.removeChild(inp);&#xD;                    myself.filePicker = null;&#xD;                    world.hand.processDrop(inp.files);&#xD;                },&#xD;                false&#xD;            );&#xD;            document.body.appendChild(inp);&#xD;            myself.filePicker = inp;&#xD;            inp.click();&#xD;        },&#xD;        &apos;file menu import hint&apos; // looks up the actual text in the translator&#xD;    );&#xD;&#xD;    if (shiftClicked) {&#xD;        menu.addItem(&#xD;            localize(&#xD;                &apos;Export project...&apos;) + &apos; &apos; + localize(&apos;(in a new window)&apos;&#xD;            ),&#xD;            function () {&#xD;                if (myself.projectName) {&#xD;                    myself.exportProject(myself.projectName, shiftClicked);&#xD;                } else {&#xD;                    myself.prompt(&apos;Export Project As...&apos;, function (name) {&#xD;                        // false - override the shiftClick setting to use XML&#xD;                        myself.exportProject(name, false);&#xD;                    }, null, &apos;exportProject&apos;);&#xD;                }&#xD;            },&#xD;            &apos;show project data as XML\nin a new browser window&apos;,&#xD;            new Color(100, 0, 0)&#xD;        );&#xD;    }&#xD;    menu.addItem(&#xD;        shiftClicked ?&#xD;                &apos;Export project as plain text...&apos; : &apos;Export project...&apos;,&#xD;        function () {&#xD;            if (myself.projectName) {&#xD;                myself.exportProject(myself.projectName, shiftClicked);&#xD;            } else {&#xD;                myself.prompt(&apos;Export Project As...&apos;, function (name) {&#xD;                    myself.exportProject(name, shiftClicked);&#xD;                }, null, &apos;exportProject&apos;);&#xD;            }&#xD;        },&#xD;        &apos;save project data as XML\nto your downloads folder&apos;,&#xD;        shiftClicked ? new Color(100, 0, 0) : null&#xD;    );&#xD;&#xD;    if (this.stage.globalBlocks.length) {&#xD;        menu.addItem(&#xD;            &apos;Export blocks...&apos;,&#xD;            function () {myself.exportGlobalBlocks(); },&#xD;            &apos;show global custom block definitions as XML&apos; +&#xD;                &apos;\nin a new browser window&apos;&#xD;        );&#xD;        menu.addItem(&#xD;            &apos;Unused blocks...&apos;,&#xD;            function () {myself.removeUnusedBlocks(); },&#xD;            &apos;find unused global custom blocks&apos; +&#xD;                &apos;\nand remove their definitions&apos;&#xD;        );&#xD;    }&#xD;&#xD;    menu.addItem(&#xD;        &apos;Export summary...&apos;,&#xD;        function () {myself.exportProjectSummary(); },&#xD;        &apos;open a new browser browser window\n with a summary of this project&apos;&#xD;    );&#xD;&#xD;    if (shiftClicked) {&#xD;        menu.addItem(&#xD;            &apos;Export summary with drop-shadows...&apos;,&#xD;            function () {myself.exportProjectSummary(true); },&#xD;            &apos;open a new browser browser window&apos; +&#xD;                &apos;\nwith a summary of this project&apos; +&#xD;                &apos;\nwith drop-shadows on all pictures.&apos; +&#xD;                &apos;\nnot supported by all browsers&apos;,&#xD;            new Color(100, 0, 0)&#xD;        );&#xD;        menu.addItem(&#xD;            &apos;Export all scripts as pic...&apos;,&#xD;            function () {myself.exportScriptsPicture(); },&#xD;            &apos;show a picture of all scripts\nand block definitions&apos;,&#xD;            new Color(100, 0, 0)&#xD;        );&#xD;    }&#xD;&#xD;&#xD;&#xD;   menu.addItem(&#xD;     &apos;Export to Codezy...&apos;,&#xD;      function(){&#xD;&#xD;        new DialogBoxMorph(&#xD;          this,&#xD;          function(message){&#xD;          var url = newUrl;&#xD;          url += &apos;&amp;message=&apos;+message;&#xD;          var ide = window.world.root().children[0];&#xD;          var data = ide.serializer.serialize(ide.stage);&#xD;          var r =  new XMLHttpRequest();&#xD;          r.open(&apos;POST&apos;, url, true);&#xD;          r.addEventListener("load", updateSmergeMenu.bind(null,ide), this);&#xD;          r.setRequestHeader(&apos;Content-Type&apos;, &apos;application/xml&apos;);&#xD;          r.send(data);&#xD;       },&#xD;       this&#xD;    ).prompt(&#xD;      &apos;commit message&apos;,&#xD;      &apos;&apos;,&#xD;      this.world(),&#xD;      null);&#xD; });&#xD;&#xD;&#xD;&#xD;&#xD;&#xD;&#xD;    menu.addLine();&#xD;    menu.addItem(&#xD;        &apos;Import tools&apos;,&#xD;        function () {&#xD;            myself.getURL(&#xD;                myself.resourceURL(&apos;tools.xml&apos;),&#xD;                function (txt) {&#xD;                    myself.droppedText(txt, &apos;tools&apos;);&#xD;                }&#xD;            );&#xD;        },&#xD;        &apos;load the official library of\npowerful blocks&apos;&#xD;    );&#xD;    menu.addItem(&#xD;        &apos;Libraries...&apos;,&#xD;        function() {&#xD;            myself.getURL(&#xD;                myself.resourceURL(&apos;libraries&apos;, &apos;LIBRARIES&apos;),&#xD;                function (txt) {&#xD;                    var libraries = myself.parseResourceFile(txt);&#xD;                    new LibraryImportDialogMorph(myself, libraries).popUp();&#xD;                }&#xD;            );&#xD;        },&#xD;        &apos;Select categories of additional blocks to add to this project.&apos;&#xD;    );&#xD;&#xD;    menu.addItem(&#xD;        localize(graphicsName) + &apos;...&apos;,&#xD;        function () {&#xD;            myself.importMedia(graphicsName);&#xD;        },&#xD;        &apos;Select a costume from the media library&apos;&#xD;    );&#xD;    menu.addItem(&#xD;        localize(&apos;Sounds&apos;) + &apos;...&apos;,&#xD;        function () {&#xD;            myself.importMedia(&apos;Sounds&apos;);&#xD;        },&#xD;        &apos;Select a sound from the media library&apos;&#xD;    );&#xD;&#xD;    menu.popup(world, pos);&#xD;};&#xD;&#xD;&#xD;&#xD;}&#xD;// END Update Smerge&#xD;&#xD;&#xD;&#xD;&#xD;   menu.addItem(&#xD;     &apos;Export to Codezy...&apos;,&#xD;      function(){&#xD;&#xD;        new DialogBoxMorph(&#xD;          this,&#xD;          function(message){&#xD;          var url = &apos;{{url}}&apos;;&#xD;          url += &apos;&amp;message=&apos;+message;&#xD;          var ide = window.world.root().children[0];&#xD;          var data = ide.serializer.serialize(ide.stage);&#xD;          var r =  new XMLHttpRequest();&#xD;          r.open(&apos;POST&apos;, url, true);&#xD;          r.addEventListener("load", updateSmergeMenu.bind(null,ide),this);&#xD;          r.setRequestHeader(&apos;Content-Type&apos;, &apos;application/xml&apos;);&#xD;          r.send(data);&#xD;       },&#xD;       this&#xD;    ).prompt(&#xD;      &apos;commit message&apos;,&#xD;      &apos;&apos;,&#xD;      this.world(),&#xD;      null);&#xD; });&#xD;&#xD;&#xD;&#xD;&#xD;    menu.addLine();&#xD;    menu.addItem(&#xD;        &apos;Import tools&apos;,&#xD;        function () {&#xD;            myself.getURL(&#xD;                myself.resourceURL(&apos;tools.xml&apos;),&#xD;                function (txt) {&#xD;                    myself.droppedText(txt, &apos;tools&apos;);&#xD;                }&#xD;            );&#xD;        },&#xD;        &apos;load the official library of\npowerful blocks&apos;&#xD;    );&#xD;    menu.addItem(&#xD;        &apos;Libraries...&apos;,&#xD;        function() {&#xD;            myself.getURL(&#xD;                myself.resourceURL(&apos;libraries&apos;, &apos;LIBRARIES&apos;),&#xD;                function (txt) {&#xD;                    var libraries = myself.parseResourceFile(txt);&#xD;                    new LibraryImportDialogMorph(myself, libraries).popUp();&#xD;                }&#xD;            );&#xD;        },&#xD;        &apos;Select categories of additional blocks to add to this project.&apos;&#xD;    );&#xD;&#xD;    menu.addItem(&#xD;        localize(graphicsName) + &apos;...&apos;,&#xD;        function () {&#xD;            myself.importMedia(graphicsName);&#xD;        },&#xD;        &apos;Select a costume from the media library&apos;&#xD;    );&#xD;    menu.addItem(&#xD;        localize(&apos;Sounds&apos;) + &apos;...&apos;,&#xD;        function () {&#xD;            myself.importMedia(&apos;Sounds&apos;);&#xD;        },&#xD;        &apos;Select a sound from the media library&apos;&#xD;    );&#xD;&#xD;    menu.popup(world, pos);&#xD;};&#xD;</l></block></block></script></block-definition>
